// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package store

import (
	"github.com/theshamuel/medregistry20/app/store/model"
	"sync"
)

// Ensure, that EngineInterfaceMock does implement EngineInterface.
// If this is not the case, regenerate this file with moq.
var _ EngineInterface = &EngineInterfaceMock{}

// EngineInterfaceMock is a mock implementation of EngineInterface.
//
// 	func TestSomethingThatUsesEngineInterface(t *testing.T) {
//
// 		// make and configure a mocked EngineInterface
// 		mockedEngineInterface := &EngineInterfaceMock{
// 			CloseFunc: func() error {
// 				panic("mock out the Close method")
// 			},
// 			CompanyDetailFunc: func() (model.Company, error) {
// 				panic("mock out the CompanyDetail method")
// 			},
// 			FindClientByIdFunc: func(id string) (model.Client, error) {
// 				panic("mock out the FindClientById method")
// 			},
// 			FindDoctorByIdFunc: func(id string) (model.Doctor, error) {
// 				panic("mock out the FindDoctorById method")
// 			},
// 			FindVisitByDoctorSinceTillFunc: func(doctorID string, startDateEvent string, endDateEvent string) ([]model.Visit, error) {
// 				panic("mock out the FindVisitByDoctorSinceTill method")
// 			},
// 			FindVisitByIdFunc: func(id string) (model.Visit, error) {
// 				panic("mock out the FindVisitById method")
// 			},
// 		}
//
// 		// use mockedEngineInterface in code that requires EngineInterface
// 		// and then make assertions.
//
// 	}
type EngineInterfaceMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func() error

	// CompanyDetailFunc mocks the CompanyDetail method.
	CompanyDetailFunc func() (model.Company, error)

	// FindClientByIdFunc mocks the FindClientById method.
	FindClientByIdFunc func(id string) (model.Client, error)

	// FindDoctorByIdFunc mocks the FindDoctorById method.
	FindDoctorByIdFunc func(id string) (model.Doctor, error)

	// FindVisitByDoctorSinceTillFunc mocks the FindVisitByDoctorSinceTill method.
	FindVisitByDoctorSinceTillFunc func(doctorID string, startDateEvent string, endDateEvent string) ([]model.Visit, error)

	// FindVisitByIdFunc mocks the FindVisitById method.
	FindVisitByIdFunc func(id string) (model.Visit, error)

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// CompanyDetail holds details about calls to the CompanyDetail method.
		CompanyDetail []struct {
		}
		// FindClientById holds details about calls to the FindClientById method.
		FindClientById []struct {
			// ID is the id argument value.
			ID string
		}
		// FindDoctorById holds details about calls to the FindDoctorById method.
		FindDoctorById []struct {
			// ID is the id argument value.
			ID string
		}
		// FindVisitByDoctorSinceTill holds details about calls to the FindVisitByDoctorSinceTill method.
		FindVisitByDoctorSinceTill []struct {
			// DoctorID is the doctorID argument value.
			DoctorID string
			// StartDateEvent is the startDateEvent argument value.
			StartDateEvent string
			// EndDateEvent is the endDateEvent argument value.
			EndDateEvent string
		}
		// FindVisitById holds details about calls to the FindVisitById method.
		FindVisitById []struct {
			// ID is the id argument value.
			ID string
		}
	}
	lockClose                      sync.RWMutex
	lockCompanyDetail              sync.RWMutex
	lockFindClientById             sync.RWMutex
	lockFindDoctorById             sync.RWMutex
	lockFindVisitByDoctorSinceTill sync.RWMutex
	lockFindVisitById              sync.RWMutex
}

// Close calls CloseFunc.
func (mock *EngineInterfaceMock) Close() error {
	if mock.CloseFunc == nil {
		panic("EngineInterfaceMock.CloseFunc: method is nil but EngineInterface.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	return mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//     len(mockedEngineInterface.CloseCalls())
func (mock *EngineInterfaceMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// CompanyDetail calls CompanyDetailFunc.
func (mock *EngineInterfaceMock) CompanyDetail() (model.Company, error) {
	if mock.CompanyDetailFunc == nil {
		panic("EngineInterfaceMock.CompanyDetailFunc: method is nil but EngineInterface.CompanyDetail was just called")
	}
	callInfo := struct {
	}{}
	mock.lockCompanyDetail.Lock()
	mock.calls.CompanyDetail = append(mock.calls.CompanyDetail, callInfo)
	mock.lockCompanyDetail.Unlock()
	return mock.CompanyDetailFunc()
}

// CompanyDetailCalls gets all the calls that were made to CompanyDetail.
// Check the length with:
//     len(mockedEngineInterface.CompanyDetailCalls())
func (mock *EngineInterfaceMock) CompanyDetailCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockCompanyDetail.RLock()
	calls = mock.calls.CompanyDetail
	mock.lockCompanyDetail.RUnlock()
	return calls
}

// FindClientById calls FindClientByIdFunc.
func (mock *EngineInterfaceMock) FindClientById(id string) (model.Client, error) {
	if mock.FindClientByIdFunc == nil {
		panic("EngineInterfaceMock.FindClientByIdFunc: method is nil but EngineInterface.FindClientById was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockFindClientById.Lock()
	mock.calls.FindClientById = append(mock.calls.FindClientById, callInfo)
	mock.lockFindClientById.Unlock()
	return mock.FindClientByIdFunc(id)
}

// FindClientByIdCalls gets all the calls that were made to FindClientById.
// Check the length with:
//     len(mockedEngineInterface.FindClientByIdCalls())
func (mock *EngineInterfaceMock) FindClientByIdCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockFindClientById.RLock()
	calls = mock.calls.FindClientById
	mock.lockFindClientById.RUnlock()
	return calls
}

// FindDoctorById calls FindDoctorByIdFunc.
func (mock *EngineInterfaceMock) FindDoctorById(id string) (model.Doctor, error) {
	if mock.FindDoctorByIdFunc == nil {
		panic("EngineInterfaceMock.FindDoctorByIdFunc: method is nil but EngineInterface.FindDoctorById was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockFindDoctorById.Lock()
	mock.calls.FindDoctorById = append(mock.calls.FindDoctorById, callInfo)
	mock.lockFindDoctorById.Unlock()
	return mock.FindDoctorByIdFunc(id)
}

// FindDoctorByIdCalls gets all the calls that were made to FindDoctorById.
// Check the length with:
//     len(mockedEngineInterface.FindDoctorByIdCalls())
func (mock *EngineInterfaceMock) FindDoctorByIdCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockFindDoctorById.RLock()
	calls = mock.calls.FindDoctorById
	mock.lockFindDoctorById.RUnlock()
	return calls
}

// FindVisitByDoctorSinceTill calls FindVisitByDoctorSinceTillFunc.
func (mock *EngineInterfaceMock) FindVisitByDoctorSinceTill(doctorID string, startDateEvent string, endDateEvent string) ([]model.Visit, error) {
	if mock.FindVisitByDoctorSinceTillFunc == nil {
		panic("EngineInterfaceMock.FindVisitByDoctorSinceTillFunc: method is nil but EngineInterface.FindVisitByDoctorSinceTill was just called")
	}
	callInfo := struct {
		DoctorID       string
		StartDateEvent string
		EndDateEvent   string
	}{
		DoctorID:       doctorID,
		StartDateEvent: startDateEvent,
		EndDateEvent:   endDateEvent,
	}
	mock.lockFindVisitByDoctorSinceTill.Lock()
	mock.calls.FindVisitByDoctorSinceTill = append(mock.calls.FindVisitByDoctorSinceTill, callInfo)
	mock.lockFindVisitByDoctorSinceTill.Unlock()
	return mock.FindVisitByDoctorSinceTillFunc(doctorID, startDateEvent, endDateEvent)
}

// FindVisitByDoctorSinceTillCalls gets all the calls that were made to FindVisitByDoctorSinceTill.
// Check the length with:
//     len(mockedEngineInterface.FindVisitByDoctorSinceTillCalls())
func (mock *EngineInterfaceMock) FindVisitByDoctorSinceTillCalls() []struct {
	DoctorID       string
	StartDateEvent string
	EndDateEvent   string
} {
	var calls []struct {
		DoctorID       string
		StartDateEvent string
		EndDateEvent   string
	}
	mock.lockFindVisitByDoctorSinceTill.RLock()
	calls = mock.calls.FindVisitByDoctorSinceTill
	mock.lockFindVisitByDoctorSinceTill.RUnlock()
	return calls
}

// FindVisitById calls FindVisitByIdFunc.
func (mock *EngineInterfaceMock) FindVisitById(id string) (model.Visit, error) {
	if mock.FindVisitByIdFunc == nil {
		panic("EngineInterfaceMock.FindVisitByIdFunc: method is nil but EngineInterface.FindVisitById was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: id,
	}
	mock.lockFindVisitById.Lock()
	mock.calls.FindVisitById = append(mock.calls.FindVisitById, callInfo)
	mock.lockFindVisitById.Unlock()
	return mock.FindVisitByIdFunc(id)
}

// FindVisitByIdCalls gets all the calls that were made to FindVisitById.
// Check the length with:
//     len(mockedEngineInterface.FindVisitByIdCalls())
func (mock *EngineInterfaceMock) FindVisitByIdCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	mock.lockFindVisitById.RLock()
	calls = mock.calls.FindVisitById
	mock.lockFindVisitById.RUnlock()
	return calls
}
